{"version":3,"sources":["features/todo/filterType.ts","styles.ts","app/hooks.ts","features/todo/todoSlice.ts","features/todo/components/Filter/index.tsx","features/todo/components/Form/index.tsx","features/todo/components/Item/styles.ts","features/todo/components/Item/index.tsx","features/todo/components/List/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["FilterType","Wrapper","styled","div","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","todos","filter","All","todoSlice","createSlice","name","reducers","addTodo","state","action","payload","removeTodo","item","id","toggleCompleted","map","completed","setFilter","actions","selectTodos","todo","Active","Done","Filter","dispatch","handleClick","ButtonGroup","className","Button","onClick","variant","Form","onKeyDown","e","key","currentTarget","value","Date","now","title","type","placeholder","Element","ListGroup","Item","Group","controlId","Check","label","List","App","Figure","Caption","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7badcd1c.chunk.js","sourcesContent":["enum FilterType {\n  All = 'All',\n  Active = 'Active',\n  Done = 'Done',\n}\n\nexport default FilterType;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  \n  @media (min-width: 768px) {  \n    width: 50%;\n  }\n`;\n\nexport default Wrapper;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport FilterType from './filterType';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../../app/store';\n\nexport interface Todo {\n  id: number,\n  title: string,\n  completed: boolean\n}\n\nexport interface TodoState {\n  todos: Todo[],\n  filter: FilterType\n}\n\nconst initialState: TodoState = {\n  todos: [],\n  filter: FilterType.All,\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<Todo>) => {\n      state.todos = [...state.todos, action.payload];\n    },\n    removeTodo: (state, action: PayloadAction<Todo>) => {\n      state.todos = state.todos.filter((item) => item.id !== action.payload.id);\n    },\n    toggleCompleted: (state, action: PayloadAction<Todo>) => {\n      state.todos = state.todos.map((item) => {\n        if (item.id === action.payload.id) {\n          return { ...item, completed: !item.completed };\n        }\n        return item;\n      });\n    },\n    setFilter: (state, action: PayloadAction<FilterType>) => {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const {\n  addTodo, removeTodo, toggleCompleted, setFilter,\n} = todoSlice.actions;\n\nexport const selectTodos = (state: RootState) => {\n  if (state.todo.filter === FilterType.Active) {\n    return state.todo.todos.filter((item: Todo) => !item.completed);\n  }\n  if (state.todo.filter === FilterType.Done) {\n    return state.todo.todos.filter((item: Todo) => item.completed);\n  }\n\n  return state.todo.todos;\n};\n\nexport default todoSlice.reducer;\n","import React from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { useAppDispatch } from '../../../../app/hooks';\nimport { setFilter } from '../../todoSlice';\nimport FilterType from '../../filterType';\n\nfunction Filter() {\n  const dispatch = useAppDispatch();\n\n  const handleClick = (filter: FilterType) => {\n    dispatch(setFilter(filter));\n  };\n\n  return (\n    <div>\n      <ButtonGroup className=\"mt-3\">\n        <Button\n          onClick={() => handleClick(FilterType.All)}\n          variant=\"link text-decoration-none\"\n        >\n          All\n        </Button>\n        <Button\n          onClick={() => handleClick(FilterType.Active)}\n          variant=\"link text-decoration-none\"\n        >\n          Active\n        </Button>\n        <Button\n          onClick={() => handleClick(FilterType.Done)}\n          variant=\"link text-decoration-none\"\n        >\n          Done\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n\nexport default Filter;\n","import React from 'react';\nimport { useAppDispatch } from '../../../../app/hooks';\nimport { addTodo } from '../../todoSlice';\n\nfunction Form() {\n  const dispatch = useAppDispatch();\n\n  const handleChange = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && e.currentTarget.value !== '') {\n      const todo = {\n        id: Date.now(),\n        title: e.currentTarget.value,\n        completed: false,\n      };\n\n      dispatch(addTodo(todo));\n\n      e.currentTarget.value = '';\n    }\n  };\n\n  return (\n    <div className=\"w-100\">\n      <input\n        onKeyDown={handleChange}\n        type=\"text\"\n        placeholder=\"add new todo\"\n        className=\"form-control form-control-color-secondary p-4\"\n      />\n    </div>\n  );\n}\n\nexport default Form;\n","import styled from 'styled-components';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst Element = styled(ListGroup.Item)`\n  height: 50px;\n  .checked label {\n    text-decoration: line-through;\n  }\n  .icon {\n    cursor: pointer;\n    opacity: 0;\n  }\n  &:hover .icon {\n    opacity: 1;\n  }\n}\n`;\n\nexport default Element;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { BsArchiveFill } from 'react-icons/all';\nimport Element from './styles';\nimport { Todo, removeTodo, toggleCompleted } from '../../todoSlice';\nimport { useAppDispatch } from '../../../../app/hooks';\n\ninterface Props {\n  item: Todo\n}\n\nfunction Item({ item }: Props) {\n  const dispatch = useAppDispatch();\n\n  const handleRemove = () => {\n    dispatch(removeTodo(item));\n  };\n\n  const handleClick = () => {\n    dispatch(toggleCompleted(item));\n  };\n\n  const className = item.completed ? 'checked text-decoration-line-through' : '';\n\n  return (\n    <Element className=\"todo\">\n      <Form.Group controlId=\"formBasicCheckbox\" className=\"d-flex align-items-center\">\n        <Form.Check\n          onClick={handleClick}\n          type=\"checkbox\"\n          label={item.title}\n          className={`checkbox flex-grow-1 text-secondary flex-grow-1 ${className}`}\n        />\n        <BsArchiveFill\n          onClick={handleRemove}\n          className=\"icon text-primary\"\n        />\n      </Form.Group>\n    </Element>\n  );\n}\n\nexport default Item;\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { useAppSelector } from '../../../../app/hooks';\nimport { selectTodos, Todo } from '../../todoSlice';\nimport Item from '../Item';\n\nfunction List() {\n  const todos = useAppSelector(selectTodos);\n\n  return (\n    <div className=\"w-100\">\n      <ListGroup>\n        {todos.map((item: Todo) => <Item key={item.id} item={item} />)}\n      </ListGroup>\n    </div>\n  );\n}\n\nexport default List;\n","import React from 'react';\nimport Figure from 'react-bootstrap/Figure';\nimport Wrapper from './styles';\nimport Filter from './features/todo/components/Filter';\nimport Form from './features/todo/components/Form';\nimport List from './features/todo/components/List';\n\nfunction App() {\n  return (\n    <div className=\"container-sm d-flex justify-content-center h-100 w-100\">\n      <Wrapper className=\"d-flex flex-column align-items-center\">\n        <Figure className=\"text-center mt-5\">\n          <blockquote className=\"blockquote\">\n            <h1 className=\"h1 title text-primary text-uppercase\">To Do List</h1>\n          </blockquote>\n          <Figure.Caption className=\"blockquote-footer text-secondary\">\n            you wont forget anything today!\n          </Figure.Caption>\n        </Figure>\n        <Form />\n        <List />\n        <Filter />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport todoReducer from '../features/todo/todoSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todo: todoReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\nReturnType,\nRootState,\nunknown,\nAction<string>\n>;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}